import React, { useState } from "react"
import { graphql, useStaticQuery } from "gatsby"

import { Item, Segment, Container, Header, Menu, Grid } from "semantic-ui-react"

import Head from "../components/head"
import Layout from "../components/layout"
import CourseCard from "../components/course-card/courseCard"
import Filter from "../components/filter"
import Hero from "../components/hero"
import HighlightedCard from "../components/highlightedCard"
import { Link } from "gatsby"

const Courses = () => {
  const data = useStaticQuery(graphql`
    query {
      allContentfulCourse(sort: { fields: title, order: ASC }) {
        edges {
          node {
            title
            slug
            price
            numberOfDays
            tags
            companyInternalCourse
            onlineCourse
            courseLeader {
              name
              image {
                title
                fixed(width: 200) {
                  width
                  height
                  src
                }
              }
              title
            }
            kurstillflle {
              city
              date(formatString: "D/M/YYYY")
              title
              location {
                lat
                lon
              }
            }
          }
        }
      }
      highlightedCourses: allContentfulCourse(
        filter: { highlight: { eq: true } }
      ) {
        edges {
          node {
            title
            shortDescription
            numberOfDays
            slug
            tags
            onlineCourse
          }
        }
      }
      file(relativePath: { eq: "courses.jpg" }) {
        childImageSharp {
          # Specify the image processing specifications right in the query.
          # Makes it trivial to update as your page's design changes.
          fluid(maxHeight: 1000) {
            ...GatsbyImageSharpFluid
          }
        }
      }
    }
  `)

  const [courses, setCourses] = useState(data.allContentfulCourse.edges)

  const updateCourses = courses => {
    if (courses.length > 0) {
      setCourses(courses)
    } else {
      setCourses(data.allContentfulCourse.edges) // reset state
    }
  }

  const [activeItem, setActiveItem] = useState("Online")

  return (
    <Layout transparentNavigation>
      <Head title="Kurser" />
      <Hero backgroundImage={data.file.childImageSharp.fluid}>
        <Header as="h1" inverted>
          Behovsanpassade kurser
        </Header>
        <p>
          Kunskap 칛r f칛rskvara. 츿ven om man har l친ng erfarenhet inom sitt omr친de
          beh칬ver man ibland uppdatera, fylla p친 och komplettera med ny kunskap
          f칬r att kunna prestera optimalt i det dagliga arbetet.
        </p>
        <p>
          Vi utvecklar och genomf칬r behovsanpassade kurser f칬r medarbetare och
          chefer.
        </p>
      </Hero>
      <Container>
        <Grid stackable>
          <Grid.Row>
            {data.highlightedCourses.edges.map((course, i) => (
              <Grid.Column width={8}>
                <Segment vertical style={{ height: "100%" }}>
                  <Link to={`/courses/${course.node.slug}`}>
                    <HighlightedCard
                      key={i}
                      data={course.node}
                      highlighted
                      online={course.node.onlineCourse}
                    />
                  </Link>
                </Segment>
              </Grid.Column>
            ))}
          </Grid.Row>
        </Grid>
      </Container>
      <Segment vertical style={{ border: "none" }}>
        <Container>
          <h2>Mest efterfr친gade kurser</h2>
          <Filter
            data={data.allContentfulCourse.edges}
            onChange={updateCourses}
          />
          <Menu pointing secondary size="big">
            <Menu.Item
              active={activeItem === "Online"}
              onClick={() => setActiveItem("Online")}
            >
              游릭 Online
            </Menu.Item>
            <Menu.Item
              active={activeItem === "F칬retagsinterna kurser"}
              onClick={() => setActiveItem("F칬retagsinterna kurser")}
            >
              F칬retagsinterna
            </Menu.Item>
            <Menu.Item
              active={activeItem === "칐ppna kurser"}
              onClick={() => setActiveItem("칐ppna kurser")}
            >
              칐ppna
            </Menu.Item>
          </Menu>
        </Container>
      </Segment>
      <Segment vertical>
        <Container>
          {activeItem === "칐ppna kurser" && (
            <p>
              Vi genomf칬r ett mindre urval 칬ppna kurser i Stockholm och G칬teborg
              som komplement till v친ra f칬retagsinterna kurser.
            </p>
          )}
          {activeItem === "F칬retagsinterna kurser" && (
            <p>
              Kurserna anpassas till f칬retagets och deltagarnas verkliga behov
              genom en webbaserad f칬rstudie d칛r vi kartl칛gger behov,
              erfarenheter och f칬rv칛ntningar inom det aktuella omr친det. D칛refter
              formas inneh친llet och matchas mot kursledare med r칛tt kompetens
              och pedagogisk f칬rm친ga att utveckla deltagarna. Vi genomf칬r kursen
              hos dig, oavsett var i Sverige f칬retaget finns.
            </p>
          )}

          <Item.Group divided>
            {activeItem === "Online" &&
              courses
                .filter(course => {
                  return course.node.onlineCourse === true
                })
                .map((edge, index) => {
                  return <CourseCard key={index} data={edge.node} />
                })}
            {activeItem === "칐ppna kurser" &&
              courses
                .filter(course => {
                  return course.node.companyInternalCourse === false
                })
                // .filter(course => new Date(course.node.rawDate) > new Date())
                .map((edge, index) => {
                  return <CourseCard key={index} data={edge.node} />
                })}
            {activeItem === "F칬retagsinterna kurser" &&
              courses
                .filter(course => {
                  return course.node.companyInternalCourse === true
                })
                .map((edge, index) => {
                  return <CourseCard key={index} data={edge.node} />
                })}
          </Item.Group>
        </Container>
      </Segment>
    </Layout>
  )
}

export default Courses
